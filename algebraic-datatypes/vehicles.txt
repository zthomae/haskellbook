Given

data Price = Price Integer deriving (Eq, Show)

data Manufacturer = Mini | Mazda | Tata deriving (Eq, Show)

data Airline = PapuAir | CatapultsR'Us | TakeYourChancesUnited deriving (Eq, Show)

data Vehicle = Car Manufacturer Price | Plane Airline deriving (Eq, Show)

myCar = Car Mini (Price 14000)
urCar = Car Mazda (Price 20000)
clownCar = Car Tata (Price 7000)
doge = Plane PapuAir

1. What is the type of myCar?

Vehicle

2. Define the functions

isCar :: Vehicle -> Bool
isCar v = case v of
  Car _ _ -> True
  _ -> False

isPlane :: Vehicle -> Bool
isPlane v = case v of
  Plane _ -> True
  _ -> False

areCars :: [Vehicle] -> Bool
areCars = map isCar

3. Now we're going to write a function to tell us the manufacturer of a
piece of data.

getManu :: Vehicle -> Manufacturer
getManu v = case v of
  Car m _ -> m
  _ -> undefined

???

4. You can't use getManu on a Plane. In my case, it evaluates to bottom.

5. Add size as an argument to the Plane constructor. These things need
to change:

data Size = Size Integer

data Vehicle = Car Manufacturer Price | Plane Airline Size deriving (Eq, Show)

isPlane v = case v of
  Plane _ _ -> True
  _ -> False
