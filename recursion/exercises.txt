# Review of types

1. What is the type signature of [[True, False], [True, True], [False, True]]?

d) [[Bool]]

2. Which of the following has the same type as the above?

b) [[3 == 3], [6 > 5], [3 < 4]]

3. For the following function:

func :: [a] -> [a] -> [a]
func x y = x ++ y

which of the following is true?

d) x and y must be of the same type, x and y must be lists, and if
x is a String then y must be a String

4. For the func code above, which is a valid application of func to
both of its arguments?

b) func "Hello" "World"

# Reviewing currying

Given the following definitions, tell us what value results from
further applications

cattyConny :: String -> String -> String
cattyConny x y = x ++ " mrow " ++ y

flippy :: String -> String -> String
flippy = flip cattyConny

appedCatty :: String -> String
appedCatty = cattyConny "woops"

frappe :: String -> String
frappe = flippy "haha"

1. What is the value of appedCatty "woohoo!"?

"woops mrow woohoo!"

2. frappe "1"

"1 mrow haha"

3. frappe (appedCatty "2")

"woops mrow 2 mrow haha"

4. appedCatty (frappe "blue")

"woops mrow blue mrow haha"

5. cattyConny (frappe "pink")
              (cattyConny "green" (appedCatty "blue"))

cattyConny "pink mrow haha" "green mrow woops mrow haha"
-> "pink mrow haha mrow green mrow wops mrow haha"

6. cattyConny (flippy "Pugs" "are") "awesome"

cattyConny "are mrow Pugs" "awesome"
-> "are mrow Pugs mrow awesome"

# Recursion

1. Write out the step sfor reducing dividedBy 15 2 to
its final answer

dividedBy :: Integral a => a -> a -> (a, a)
dividedBy num denom = go num denom 0
  where go n   d count
         | n < d = (count, n)
         | otherwise = go (n - d) d (count + 1)

dividedBy 15 2
go 15 2 0
go 13 2 1
go 11 2 2
go 9 2 3
go 7 2 4
go 5 2 5
go 3 2 6
go 1 2 7
(7, 1)

2. Write a function that recursively sums all numbers
from 1 to n, n being the argument. The type should be
(Eq a, Num a) => a -> a

sumUpTo :: (Eq a, Num a) => a -> a
sumUpTo n = go 1 n 0
  where go i n s
         | i > n = s
         | otherwise = go (i + 1) n (s + i)

3. Write a function that multiplies two integral numbers
using recursive summation. The type should be
(Integral a) => a -> a -> a

See multiply.hs

# Fixing dividedBy

See dividedByFixed.hs

# McCarthy 91 Function

See mccarthy.hs

# Numbers into words

see numbers.hs
