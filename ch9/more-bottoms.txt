1. Will the following expression return a value or
be bottom?

take 1 $ map (+1) [undefined, 2, 3]

bottom -- the one value forced would be undefined

2. take 1 $ map (+1) [1, undefined, 3]

This will return a value of [2]

3. take 2 $ map (+1) [1, undefined, 3]

This will not return a value

4. What does the following mystery function do?
What is its type? Describe it in standard English
and then test it out in the REPL.

itIsMystery xs = map (\x -> elem x "aeiou") xs

itIsMystery :: [Char] -> [Bool]. It returns a list
of booleans signifying whether the corresponding
character in the original list is a lowercase vowel.

5. What will be the result of the following functions?

a) map (^2) [1..10]

[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

b) map minimum [[1..10], [10..20], [20..30]]

[1, 10, 20]

c) map sum [[1..5], [1..5], [1..5]]

[15, 15, 15]

6. Back in the Functions chapter, you wrote a function
called foldBool. That function exists in a module known
as Data.Bool and is called bool. Write a function that
does the same (or similar, if you wish) as the
map (if-then-else) function you saw above but uses
bool instead of the if-then-else syntax.

map (\x -> bool (-x) x (x == 3)) [1..10]
