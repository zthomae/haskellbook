# What will :sprint output?

1. let x = 1

x has not been forced yet, because x does not have a concrete numeric type. So, it'll print

x = _

2. let x = ['1']

x does have a concrete type (of String), and ghc will fully evaluate the literal '1' passed
to the list data constructor. So we'll see

x = "1"

3. let x = [1]

x does not have a concrete type, so it won't even evaluate the list data constructor.

x = _

4. let x = 1 :: Int

x now has a concrete type, and ghc will evaluate it immediately

x = 1

5. let f = \x -> x
   let x = f 1

f is a function, and thus will always :sprint to _.
x remains unevaluated because it is not used, and it requires computation other than the use of
a data constructor

6. let f :: Int -> Int; f = \x -> x
   let x = f 1

This is the same as the previous example. Adding a concrete type on f doesn't change anything.

# Will printing this expression result in bottom?

1. snd (undefined, 1)

No

2. let x = undefined
   let y = x `seq` 1 in snd (x, y)

Yes. snd (x, y) forces the value of y, which in turn forces the undefined x

3. length $ [1..5] ++ undefined

Yes. length forces the entire list structure to be evaluated so the length can be known. This
means evaluating an undefined.

4. length $ [1..5] ++ [undefined]

No. Evaluating the structure of [undefined] so as to take the length does not force bottom.

5. const 1 undefined

No. const disregards the second argument, so the undefined is never forced.

6. const 1 (undefined `seq` 1)

No. The second argument to const is not forced, so the 1 to which the undefined is attached is
not forced.

7. const undefined 1

Yes.
